[tool.poetry]
name = "aria-api"
version = "0.1.0"
description = ""
authors = ["danielkjellid <daniel.kjellid@gmail.com>"]

################
# Dependencies #
################

[tool.poetry.dependencies]
python = "3.10.2"
boto3 = "1.14.63"
botocore = "1.17.63"
Django = "4.0.6"
django-cors-headers = "3.13.0"
django-environ = "0.9.0"
django-extensions = "^3.1.5"
django-filter = "^22.1"
django-imagekit = "4.1.0"
django-mptt = "^0.13.4"
django-s3-storage = "0.13.6"
gunicorn = "20.1.0"
ipython = "8.4.0"
jedi = "0.18.1"
pexpect = "4.8.0"
phonenumbers = "8.12.51"
pilkit = "2.0"
prompt-toolkit = "3.0.30"
psycopg2 = "^2.8.6"
psycopg2-binary = "^2.8.6"
Pillow = "9.2.0"
Pygments = "2.12.0"
PyJWT = "2.4.0"
requests = "2.28.1"
s3transfer = "0.3.7"
sentry-sdk = "^1.6.0"
structlog = "^21.5.0"
uritemplate = "^4.1.1"
whitenoise = "6.2.0"
pydantic = "^1.9.1"
django-ninja = "^0.19.0"
orjson = "^3.7.7"
django-countries = "^7.3.2"
django-redis = "^5.2.0"
dacite = "^1.6.0"
hiredis = "^2.0.0"
celery = "^5.2.7"
pytest-celery = "^0.0.0"

############################
# Development dependencies #
############################

[tool.poetry.dev-dependencies]
black = "^22.6"
flake8 = "^4.0.1"
flake8-black = "^0.3.3"
flake8-isort = "^4.1.1"
isort = "^5.10.1"
model-bakery = "^1.6.0"
mypy = "0.950"
mypy-extensions = "0.4.3"
pytest-django = "^4.5.2"
pytest-env = "^0.6.2"
pytest = "^7.1.1"
pytest-cov = "^3.0.0"
pytest-socket = "^0.5.1"
pytest-mock = "^3.8.2"
pytest-lazy-fixture = "^0.6.3"
pytest-remove-stale-bytecode = "^5.0.1"
pytest-xdist = "^2.5.0"
typing-extensions = "4.3.0"
django-stubs = "1.11.0"
types-requests = "^2.28.1"
pylint = "^2.14.4"
pylint-django = "^2.5.3"

#########
# Black #
#########

[tool.black]
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = 'migrations'
safe = true

#########
# Isort #
#########

[tool.isort]
profile = "black"
skip_gitignore = true
skip_glob = "*migrations*"
known_django = ["django"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
combine_as_imports = true

########
# Mypy #
########

[tool.mypy]
python_version = "3.10"
plugins = ["mypy_django_plugin.main", "pydantic.mypy"]
follow_imports = "normal"
ignore_missing_imports = true
strict = true

disallow_subclassing_any = false

[tool.django-stubs]
django_settings_module = "aria.settings"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# Admin files uses some patterns that are not easily typed
[[tool.mypy.overrides]]
module = "aria.*.admin"
ignore_errors = true

[[tool.mypy.overrides]]
module = "aria.conftest"
ignore_errors = true

[[tool.mypy.overrides]]
module = "aria.*.tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "aria.*.migrations.*"
ignore_errors = "true"

[[tool.mypy.overrides]]
module = "aria.*.management.*"
disallow_untyped_defs = false

# Django-stubs currently has a bug where it throws the error
# "error: Name "Optional" is not defined" in files where
# CurrentSiteManager is imported.
#
# The three bellow will be removed as soon as possible.
[[tool.mypy.overrides]]
module = "aria.users.models"
ignore_errors = true

[[tool.mypy.overrides]]
module = "aria.products.models"
ignore_errors = true

[[tool.mypy.overrides]]
module = "aria.suppliers.models"
ignore_errors = true

##########
# Pylint #
##########

[tool.pylint.master]
persistent = "yes"
ignore = ["migrations", "conftest.py"]
load-plugins = "pylint_django"
django-settings-module = "aria.settings"
extension-pkg-whitelist = ["pydantic"]
jobs = 1
init-hook = "import sys; sys.path.append('./box_estimation');"

[tool.pylint.messages_control]
disable = [
    "C0103", # C0103 Invalid module name
    "C0114", # C0114 Missing module docstring
    "C0115", # C0115 Missing class docstring
    "C0415", # C0415 Import outside toplevel
    "E1101", # E1101 Used when a variable is accessed for a nonexistent member
    "R0401", # R0401 Cyclic import
    "R0801", # R0801 Similar lines in files
    "W0212", # W0212 Access to a protected member %s of a client class
    "W0511", # W0511 Used when a warning note as FIXME or XXX is detected
]

[tool.pylint.basic]
no-docstring-rgx = "__.*__|_.*"
class-rgx = "[A-Z_][a-zA-Z0-9_]+$"
function-rgx = "[a-zA_][a-zA-Z0-9_]{2,70}$"
method-rgx = "[a-z_][a-zA-Z0-9_]{2,70}$"
const-rgx = "(([A-Z_][A-Z0-9_]*)|([a-z_][a-z0-9_]*)|(__.*__)|register|urlpatterns)$"
good-names = [
    "_",
    "i",
    "j",
    "qs",
    "id",
    "dt",
    "ts",
    "pk",
    "User",
]

[tool.pylint.typecheck]
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members = "yes"

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes = ["SQLObject", "WSGIRequest"]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed.
generated-members = [
    "objects",
    "DoesNotExist",
    "id",
    "pk",
    "_meta",
    "base_fields",
    "context"
]

# List of method names used to declare (i.e. assign) instance attributes
defining-attr-methods = [
    "__init__",
    "__new__",
]

[tool.pylint.variables]
init-import = "no"
dummy-variables-rgx = "_|dummy"

[tool.pylint.similarities]
min-similarity-lines = 6
ignore-comments = "yes"
ignore-docstrings = "yes"

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.format]
max-line-length = 88
max-module-lines = 1000
indent-string = "'    '"

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 10
max-branches = 15
max-statements = 50
max-parents = 7
max-attributes = 7
min-public-methods = 0
max-public-methods = 50

##########
# Pytest #
##########

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["aria"]
python_files = "test_*.py"
# Reuse the database between tests
addopts = [
    "--reuse-db",
    "--allow-hosts=localhost,::1,127.0.0.1",
]
# Include captured log messages in system-out in CI report file
junit_logging = "system-out"
# --- pytest-django settings
DJANGO_SETTINGS_MODULE = "aria.settings"
# --- pytest-env settings
env = ["ENV_PATH=.env.test"]

###############
# Poetry misc #
###############

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"