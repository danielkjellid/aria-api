# Generated by Django 4.1.1 on 2022-10-22 13:00

from django.db import migrations
from django.db.migrations.operations import RunPython
from django.utils import timezone


def backfill_colors(apps, schema_editor):
    """
    Copy the Color model instances from the products app into the
    product_attributes app.
    """

    ProductColor = apps.get_model("products", "Color")
    Color = apps.get_model("product_attributes", "Color")

    colors_to_create = []

    for color in ProductColor.objects.all():
        colors_to_create.append(
            Color(
                id=color.id,
                name=color.name,
                color_hex=color.color_hex,
                created_at=timezone.now(),
                updated_at=timezone.now(),
            )
        )

    Color.objects.bulk_create(colors_to_create)

    product_colors = list(
        ProductColor.objects.all().order_by("id").values("id", "name", "color_hex")
    )
    colors = list(Color.objects.all().order_by("id").values("id", "name", "color_hex"))

    assert colors == product_colors


def backfill_sizes(apps, schema_editor):
    """
    Copy the Size model instances from the products app into the
    product_attributes app.
    """

    ProductSize = apps.get_model("products", "Size")
    Size = apps.get_model("product_attributes", "Size")

    sizes_to_create = []

    for size in ProductSize.objects.all():
        sizes_to_create.append(
            Size(
                id=size.id,
                width=size.width,
                height=size.height,
                depth=size.depth,
                circumference=size.circumference,
                created_at=timezone.now(),
                updated_at=timezone.now(),
            )
        )

    Size.objects.bulk_create(sizes_to_create)

    product_sizes = list(
        ProductSize.objects.all()
        .order_by("id")
        .values("id", "width", "height", "depth", "circumference")
    )
    sizes = list(
        Size.objects.all()
        .order_by("id")
        .values("id", "width", "height", "depth", "circumference")
    )

    assert sizes == product_sizes


def backfill_shapes(apps, schema_editor):
    """
    Copy the Shape model instances from the products app into the
    product_attributes app.
    """

    ProductShape = apps.get_model("products", "Shape")
    Shape = apps.get_model("product_attributes", "Shape")

    shapes_to_create = []

    for shape in ProductShape.objects.all():
        shapes_to_create.append(
            Shape(
                id=shape.id,
                name=shape.name,
                image=shape.image,
                created_at=timezone.now(),
                updated_at=timezone.now(),
            )
        )

    Shape.objects.bulk_create(shapes_to_create)

    product_shapes = list(
        ProductShape.objects.all().order_by("id").values("id", "name", "image")
    )
    shapes = list(Shape.objects.all().order_by("id").values("id", "name", "image"))

    assert shapes == product_shapes


def backfill_variants(apps, schema_editor):
    """
    Copy the Variant model instances from the products app into the
    product_attributes app.
    """

    ProductVariant = apps.get_model("products", "Variant")
    Variant = apps.get_model("product_attributes", "Variant")

    variants_to_create = []

    for variant in ProductVariant.objects.all():
        variants_to_create.append(
            Variant(
                id=variant.id,
                name=variant.name,
                thumbnail=variant.thumbnail,
                is_standard=variant.is_standard,
                created_at=timezone.now(),
                updated_at=timezone.now(),
            )
        )

    Variant.objects.bulk_create(variants_to_create)

    product_variants = list(
        ProductVariant.objects.all()
        .order_by("id")
        .values("id", "name", "thumbnail", "is_standard")
    )
    variants = list(
        Variant.objects.all()
        .order_by("id")
        .values("id", "name", "thumbnail", "is_standard")
    )

    assert variants == product_variants


def backfill_product_option_relations(apps, schema_editor):
    """
    Populate the ProductOption instances from the products app with the new relations.
    """

    ProductOption = apps.get_model("products", "ProductOption")
    ProductVariant = apps.get_model("products", "Variant")
    ProductSize = apps.get_model("products", "Size")

    Variant = apps.get_model("product_attributes", "Variant")
    Size = apps.get_model("product_attributes", "Size")

    objs_to_update = []

    for option in ProductOption.objects.all():
        # Ids should be 1-1 between the models.
        option.size_attr_id = option.size_id
        option.variant_attr_id = option.variant_id
        objs_to_update.append(option)

    if objs_to_update:
        first_size_id = objs_to_update[0].size_id
        last_size_id = objs_to_update[-1].size_id

        product_size_1 = ProductSize.objects.get(id=first_size_id)
        size_1 = Size.objects.get(id=first_size_id)

        assert size_1.id == product_size_1.id
        assert size_1.width == product_size_1.width
        assert size_1.height == product_size_1.height
        assert size_1.depth == product_size_1.depth
        assert size_1.circumference == product_size_1.circumference


        product_size_2 = ProductSize.objects.get(id=last_size_id)
        size_2 = Size.objects.get(id=last_size_id)

        assert size_2.id == product_size_2.id
        assert size_2.width == product_size_2.width
        assert size_2.height == product_size_2.height
        assert size_2.depth == product_size_2.depth
        assert size_2.circumference == product_size_2.circumference

        first_variant_id = objs_to_update[0].variant_id
        last_variant_id = objs_to_update[-1].variant_id

        product_variant_1 = ProductVariant.objects.get(id=first_variant_id)
        variant_1 = Variant.objects.get(id=first_variant_id)

        assert variant_1.id == product_variant_1.id
        assert variant_1.name == product_variant_1.name
        assert variant_1.thumbnail == product_variant_1.thumbnail
        assert variant_1.is_standard == product_variant_1.is_standard

        product_variant_2 = ProductVariant.objects.get(id=last_variant_id)
        variant_2 = Variant.objects.get(id=last_variant_id)

        assert variant_2.id == product_variant_2.id
        assert variant_2.name == product_variant_2.name
        assert variant_2.thumbnail == product_variant_2.thumbnail
        assert variant_2.is_standard == product_variant_2.is_standard

        ProductOption.objects.bulk_update(objs_to_update, ["size_attr_id", "variant_attr_id"])


class Migration(migrations.Migration):

    atomic = True

    dependencies = [
        ("product_attributes", "0001_initial"),
        ("products", "0012_productoption_size_attr_productoption_variant_attr"),
    ]

    operations = [
        RunPython(backfill_colors, RunPython.noop),
        RunPython(backfill_shapes, RunPython.noop),
        RunPython(backfill_sizes, RunPython.noop),
        RunPython(backfill_variants, RunPython.noop),
        RunPython(backfill_product_option_relations, RunPython.noop),
    ]
